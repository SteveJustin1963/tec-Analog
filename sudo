// Define constants
const int16_t N = 5;
const int16_t SCALE = 1000;  // 16-bit fixed-point scale

// Data input
int16_t x1[N] = {1500, 2000, 2500, 3000, 3500};
int16_t x2[N] = {3, 4, 5, 6, 7};
int16_t y[N] = {200000, 250000, 300000, 350000, 400000};

// Calculate means of x1, x2, and y
int32_t sum_x1 = 0;
int32_t sum_x2 = 0;
int32_t sum_y = 0;

for (int16_t i = 0; i < N; i++) {
    sum_x1 += x1[i];
    sum_x2 += x2[i];
    sum_y += y[i];
}

int16_t mean_x1 = (sum_x1 + (N / 2)) / N;  // Rounded division
int16_t mean_x2 = (sum_x2 + (N / 2)) / N;  // Rounded division
int16_t mean_y = (sum_y + (N / 2)) / N;    // Rounded division

// Calculate coefficients b1 and b2
int32_t ss_xy1 = 0;
int32_t ss_xx1 = 0;
int32_t ss_xy2 = 0;
int32_t ss_xx2 = 0;

for (int16_t i = 0; i < N; i++) {
    int16_t x1_dev = x1[i] - mean_x1;
    int16_t x2_dev = x2[i] - mean_x2;
    int16_t y_dev = y[i] - mean_y;

    ss_xy1 += (int32_t)x1_dev * y_dev;
    ss_xx1 += (int32_t)x1_dev * x1_dev;
    ss_xy2 += (int32_t)x2_dev * y_dev;
    ss_xx2 += (int32_t)x2_dev * x2_dev;
}

int16_t b1 = (int16_t)((ss_xy1 + (ss_xx1 / 2)) / (ss_xx1 + (SCALE / 2)));  // Rounded division
int16_t b2 = (int16_t)((ss_xy2 + (ss_xx2 / 2)) / (ss_xx2 + (SCALE / 2)));  // Rounded division

// Calculate b3 (intercept)
int16_t b3 = mean_y - ((int32_t)b1 * mean_x1 + (int32_t)b2 * mean_x2) / SCALE;

// Print the result
print("The line of best fit is: y = ", b3, " + ", b1, "x1 + ", b2, "x2");
